@inherits CoreComponent
@implements IDisposable

<Transition Appear Show="IsOpen" AsComponent="typeof(Fragment)" Context="_">
    <Dialog IsOpenChanged="IsOpenChanged">
        <TransitionChild
            AsComponent="typeof(Fragment)"
            Enter="ease-out duration-300"
            EnterFrom="opacity-0"
            EnterTo="opacity-100"
            Leave="ease-in duration-300"
            LeaveFrom="opacity-100"
            LeaveTo="opacity-0"
            Context="transition">

            <div class="@Css.Class("absolute inset-0 bg-black/20", transition)"></div>

        </TransitionChild>

        <div class="absolute inset-0" @onclick="() => BackdropDismiss ? Close() : None.Value">
            <div class="w-full h-full overflow-hidden flex">
                <TransitionChild
                    AsComponent="typeof(Fragment)"
                    Enter="ease-out duration-300"
                    EnterFrom="opacity-0 scale-95"
                    EnterTo="opacity-100 scale-100"
                    Leave="ease-in duration-300"
                    LeaveFrom="opacity-100 scale-100"
                    LeaveTo="opacity-0 scale-95"
                    Context="transition">

                    <div class="@Css.Class("w-full max-h-full rounded-2xl bg-secondary-container overflow-y-auto p-6 m-4", Class() ?? "self-center justify-self-center", transition.CssClass)" @onclick:stopPropagation>
                        <ReactiveSection For="updateExpression" AsComponent="typeof(Fragment)">
                            @(ChildContent?.Invoke(this))
                        </ReactiveSection>
                    </div>
                </TransitionChild>
            </div>
        </div>
    </Dialog>
</Transition>

@code {
    private ReactiveValue<int> updateExpression;

    [Parameter]
    public bool IsOpen { get; set; }

    [Parameter]
    public EventCallback<bool> IsOpenChanged { get; set; }

    [Parameter]
    public IObservable<bool>? IsOpenWhen { get; set; }

    [Parameter]
    public IObservable<None>? UpdateWhen { get; set; }

    [Parameter]
    public RenderFragment<Modal>? ChildContent { get; set; }

    [Parameter]
    public bool BackdropDismiss { get; set; } = true;

    [Parameter]
    public EventCallback OnDismiss { get; set; }

    [Parameter]
    public EventCallback OnShow { get; set; }

    public Modal()
    {
        updateExpression = new(this, 0);
    }

    protected override void OnInitialized()
    {
        if (IsOpenWhen is { })
        {
            var sub = IsOpenWhen.Subscribe(open =>
            {
                IsOpen = open;
                base.Update();
            });
            DisposeWith(sub);
        }
        if (UpdateWhen is { })
        {
            var updateSub = UpdateWhen.Subscribe(_ => updateExpression.Value = 0);
            DisposeWith(updateSub);
        }
    }

    public None Show()
    {
        IsOpen = true;
        OnShow.InvokeAsync();
        base.Update();
        return None.Value;
    }

    public None Close()
    {
        IsOpen = false;
        OnDismiss.InvokeAsync();
        base.Update();
        return None.Value;
    }

    public None Toggle()
    {
        return IsOpen ? Close() : Show();
    }

    public void Update()
    {
        updateExpression.Value = 0;
    }
}
