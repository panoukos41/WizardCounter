@using System.Diagnostics.CodeAnalysis
@using System.Globalization
@using OneOf;

@inherits CoreComponent

@if (!If.Match(static v => v, static f => f()))
{
    return;
}

<button
    @attributes="Attributes"
    type="@TypeAttribute"
    class="@ClassAttribute"
    disabled="@DisabledAttribute"
    @onclick="OnClick"
    @onclick:stopPropagation="StopPropagation"
    @onclick:preventDefault="PreventDefault">
    @if (IsLoading)
    {
        <div class="absolute inset-0 flex items-center justify-center">
            <svg class="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
        </div>
    }
    @ChildContent
</button>

@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public bool IsLoading { get; set; }

    [Parameter]
    public EventCallback OnClick { get; set; }

    [Parameter]
    public bool StopPropagation { get; set; }

    [Parameter]
    public bool PreventDefault { get; set; }

    public OneOf<bool, Func<bool>> If { get; set; } = true;

    private string TypeAttribute => this.GetAttributeOrDefault<string>("type", "button");
    
    private bool DisabledAttribute => this.GetAttributeOrDefault<bool>("disabled", false) || IsLoading;

    private string? ClassAttribute
        => Css.Class(this.TryGetAttribute<string>("class"), ("cursor-not-allowed relative", IsLoading));
}
